[{"/Users/murco/Code/capstone_three/achiever/src/index.tsx":"1","/Users/murco/Code/capstone_three/achiever/src/reportWebVitals.ts":"2","/Users/murco/Code/capstone_three/achiever/src/App/App.tsx":"3","/Users/murco/Code/capstone_three/achiever/src/ApiContext.ts":"4","/Users/murco/Code/capstone_three/achiever/src/config.ts":"5","/Users/murco/Code/capstone_three/achiever/src/TaskListMain/TaskListMain.tsx":"6","/Users/murco/Code/capstone_three/achiever/src/AddTask/AddTask.tsx":"7","/Users/murco/Code/capstone_three/achiever/src/AddGoal/AddGoal.tsx":"8","/Users/murco/Code/capstone_three/achiever/src/tasks-helpers.ts":"9","/Users/murco/Code/capstone_three/achiever/src/CircleButton/CircleButton.tsx":"10","/Users/murco/Code/capstone_three/achiever/src/AchieverForm/AchieverForm.tsx":"11","/Users/murco/Code/capstone_three/achiever/src/Task/Task.tsx":"12","/Users/murco/Code/capstone_three/achiever/src/GoalListNav/GoalListNav.tsx":"13"},{"size":906,"mtime":1609820198711,"results":"14","hashOfConfig":"15"},{"size":425,"mtime":1609202572384,"results":"16","hashOfConfig":"15"},{"size":4232,"mtime":1610326977714,"results":"17","hashOfConfig":"15"},{"size":602,"mtime":1609835633731,"results":"18","hashOfConfig":"15"},{"size":103,"mtime":1609836292040,"results":"19","hashOfConfig":"15"},{"size":1533,"mtime":1610332389094,"results":"20","hashOfConfig":"15"},{"size":3605,"mtime":1609835680095,"results":"21","hashOfConfig":"15"},{"size":1802,"mtime":1609835680156,"results":"22","hashOfConfig":"15"},{"size":808,"mtime":1609836080805,"results":"23","hashOfConfig":"15"},{"size":494,"mtime":1609642221771,"results":"24","hashOfConfig":"15"},{"size":337,"mtime":1609835680156,"results":"25","hashOfConfig":"15"},{"size":1763,"mtime":1610409654160,"results":"26","hashOfConfig":"15"},{"size":1475,"mtime":1610314792518,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1liz7e8",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"30"},"/Users/murco/Code/capstone_three/achiever/src/index.tsx",[],["58","59"],"/Users/murco/Code/capstone_three/achiever/src/reportWebVitals.ts",[],"/Users/murco/Code/capstone_three/achiever/src/App/App.tsx",["60"],"import React, { useEffect, useState } from \"react\";\nimport { Route, Link } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport GoalListNav from \"../GoalListNav/GoalListNav\";\nimport TaskListMain from \"../TaskListMain/TaskListMain\";\nimport AddGoal from \"../AddGoal/AddGoal\";\nimport AddTask from \"../AddTask/AddTask\";\nimport ApiContext from \"../ApiContext\";\nimport config from \"../config\";\nimport \"./App.css\";\n\nimport CircleButton from \"../CircleButton/CircleButton\";\n\nexport default function App() {\n  interface taskInterface {\n    id: number;\n    name: string;\n    details: string;\n    goal_id: number;\n    date_created?: string;\n  }\n\n  type tasksInterface = taskInterface[];\n\n  const [tasks, setTasks] = useState<tasksInterface>([]);\n\n  interface goalInterface {\n    id: number;\n    name: string;\n  }\n\n  type goalsInterface = goalInterface[];\n\n  const [goals, setGoals] = useState<goalsInterface>([]);\n\n  useEffect(() => {\n    Promise.all([\n      fetch(`${config.API_ENDPOINT}/api/tasks`),\n      fetch(`${config.API_ENDPOINT}/api/goals`),\n    ])\n      .then(([tasksRes, goalsRes]) => {\n        if (!tasksRes.ok) {\n          return tasksRes.json().then((e) => Promise.reject(e));\n        }\n        if (!goalsRes.ok) {\n          return goalsRes.json().then((e) => Promise.reject(e));\n        }\n\n        return Promise.all([tasksRes.json(), goalsRes.json()]);\n      })\n      .then(([tasks, goals]) => {\n        Promise.all([setTasks(tasks), setGoals(goals)]);\n      })\n      .catch((error) => {\n        console.error({ error });\n      });\n  }, []);\n\n  const handleAddGoal = (goal: goalInterface) => {\n    if (goals === undefined) {\n      setGoals([goal]);\n    } else {\n      setGoals([...goals, goal]);\n    }\n  };\n\n  const handleAddTask = (task: taskInterface) => {\n    if (tasks === undefined) {\n      setTasks([task]);\n    } else {\n      setTasks([...tasks, task]);\n    }\n  };\n\n  const handleDeleteTask = (taskId: number) => {\n    if (tasks === undefined) {\n      return null;\n    }\n    setTasks(tasks.filter((task) => task.id !== taskId));\n  };\n\n  const value = {\n    tasks: tasks,\n    goals: goals,\n    addGoal: handleAddGoal,\n    addTask: handleAddTask,\n    deleteTask: handleDeleteTask,\n  };\n\n  return (\n    <ApiContext.Provider value={value}>\n      <div className=\"App\">\n        <header className=\"App__header\">\n          <h1>\n            <Link to=\"/\">Achiever</Link> <FontAwesomeIcon icon=\"check-double\" />\n          </h1>\n          <div className=\"Quote\">\n            <h2>\n              <FontAwesomeIcon icon=\"quote-left\" />\n              The most effective way to achieve important goals in your life is\n              to break big goals up into smaller tasks.\n              <FontAwesomeIcon icon=\"quote-right\" />\n            </h2>\n          </div>\n        </header>\n        <div className=\"App__body\">\n          <section className=\"App__board_1\">\n            <div className=\"App__board__header\">\n              <div className=\"GoalListNav\">\n                <Link to=\"/\">\n                  <span className=\"Title\">Goals</span>\n                </Link>\n                <FontAwesomeIcon icon=\"check-double\" />\n              </div>\n            </div>\n            {renderNavRoutes()}\n          </section>\n\n          <section className=\"App__board\">\n            <div className=\"App__board__header\">\n              <div className=\"GoalListNav\">\n                <Link to=\"/\">\n                  <span className=\"Title\">Tasks</span>\n                </Link>\n                <FontAwesomeIcon icon=\"check-double\" />\n              </div>\n            </div>\n            <main className=\"App__main\">{renderMainRoutes()}</main>\n          </section>\n        </div>\n      </div>\n    </ApiContext.Provider>\n  );\n}\n\nfunction renderNavRoutes() {\n  return (\n    <>\n      {[\"/\", \"/goal/:goalId\"].map((path) => (\n        <Route exact key={path} path={path} component={GoalListNav} />\n      ))}\n    </>\n  );\n}\n\nfunction renderMainRoutes() {\n  return (\n    <>\n      {[\"/\", \"/goal/:goalId\"].map((path) => (\n        <Route exact key={path} path={path} component={TaskListMain} />\n      ))}\n      <Route path=\"/add-goal\" component={AddGoal} />\n      <Route path=\"/add-task\" component={AddTask} />\n    </>\n  );\n}\n","/Users/murco/Code/capstone_three/achiever/src/ApiContext.ts",[],"/Users/murco/Code/capstone_three/achiever/src/config.ts",["61"],"export default {\n  API_ENDPOINT: \"http://localhost:8000\",\n  API_KEY: process.env.REACT_APP_API_KEY,\n};\n","/Users/murco/Code/capstone_three/achiever/src/TaskListMain/TaskListMain.tsx",[],"/Users/murco/Code/capstone_three/achiever/src/AddTask/AddTask.tsx",[],"/Users/murco/Code/capstone_three/achiever/src/AddGoal/AddGoal.tsx",[],"/Users/murco/Code/capstone_three/achiever/src/tasks-helpers.ts",[],"/Users/murco/Code/capstone_three/achiever/src/CircleButton/CircleButton.tsx",[],"/Users/murco/Code/capstone_three/achiever/src/AchieverForm/AchieverForm.tsx",[],"/Users/murco/Code/capstone_three/achiever/src/Task/Task.tsx",["62"],"/Users/murco/Code/capstone_three/achiever/src/GoalListNav/GoalListNav.tsx",["63"],"import React, { useContext } from \"react\";\nimport { NavLink, Link } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport CircleButton from \"../CircleButton/CircleButton\";\nimport ApiContext from \"../ApiContext\";\nimport { countTasksForGoal } from \"../tasks-helpers\";\nimport \"./GoalListNav.css\";\n\nexport default function GoalListNav() {\n  const { goals, tasks } = useContext(ApiContext)!;\n\n  const renderGoals = (goals: any) => {\n    {\n      if (goals === undefined) {\n        return null;\n      } else {\n        return goals!.map((goal: any) => (\n          <NavLink className=\"GoalListNav__goal-link\" to={`/goal/${goal.id}`}>\n            <div className=\"Goal__card\" key={goal.id}>\n              <span className=\"GoalListNav__num-tasks\">\n                {countTasksForGoal(tasks, goal.id)}\n              </span>\n              {goal.name}\n            </div>\n          </NavLink>\n        ));\n      }\n    }\n  };\n  return (\n    <section className=\"GoalListNav\">\n      <div className=\"GoalListNav__list\">\n        {renderGoals(goals)}{\" \"}\n        <div className=\"GoalListNav__button-wrapper\">\n          <CircleButton\n            tag={Link}\n            role=\"link\"\n            to=\"/add-goal\"\n            type=\"button\"\n            className=\"GoalListNav__add-goal-button\"\n          >\n            <FontAwesomeIcon icon=\"plus\" />\n            <br />\n            Goal\n          </CircleButton>\n        </div>\n      </div>\n    </section>\n  );\n}\n",{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":12,"column":8,"nodeType":"70","messageId":"71","endLine":12,"endColumn":20},{"ruleId":"72","severity":1,"message":"73","line":1,"column":1,"nodeType":"74","endLine":4,"endColumn":3},{"ruleId":"68","severity":1,"message":"75","line":2,"column":10,"nodeType":"70","messageId":"71","endLine":2,"endColumn":14},{"ruleId":"76","severity":1,"message":"77","line":13,"column":5,"nodeType":"78","messageId":"79","endLine":28,"endColumn":6},"no-native-reassign",["80"],"no-negated-in-lhs",["81"],"@typescript-eslint/no-unused-vars","'CircleButton' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'Link' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-global-assign","no-unsafe-negation"]